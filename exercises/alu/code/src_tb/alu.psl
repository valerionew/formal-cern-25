
vunit alu_psl(alu) {

    signal clk : std_logic;
    default clock is rising_edge(clk);

    alu_addition: assert (mode_i = "000" -> s_o = std_logic_vector(unsigned(a_i) + unsigned(b_i)));
    alu_carry: assert (mode_i = "000" and unsigned("0" & a_i) + unsigned("0" & b_i) >= 2**(a_i'high+1) -> c_o = '1');
    alu_n_carry: assert (mode_i = "000" and (unsigned("0" & a_i) + unsigned("0" & b_i) < 2**(a_i'high+1)) -> c_o = '0');
    alu_subtraction_carry: assert (mode_i = "001" and unsigned(a_i) < unsigned(b_i) -> c_o = '1');
    alu_subtraction_n_carry: assert (mode_i = "001" and unsigned(a_i) >= unsigned(b_i) -> c_o = '0');
    alu_subtraction: assert (mode_i = "001" -> s_o = std_logic_vector(unsigned(a_i) - unsigned(b_i)));
    alu_or: assert (mode_i = "010" -> s_o = (a_i or b_i));
    alu_and: assert (mode_i = "011" -> s_o = (a_i and b_i));
    alu_a: assert (mode_i = "100" -> s_o = a_i);
    alu_b: assert (mode_i = "101" -> s_o = b_i);
    equal: assert (mode_i = "110" and a_i = b_i -> s_o(0) = '1');
    n_equal: assert (mode_i = "110" and a_i /= b_i -> s_o(0) = '0');
    zeros: assert (mode_i = "111" -> 0 = unsigned(s_o));
}

